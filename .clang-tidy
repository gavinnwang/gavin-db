---
Checks:     '
            bugprone-*,
            clang-analyzer-*,
            google-*,
            modernize-*,
            performance-*,
            portability-*,
            readability-*,
            -modernize-use-trailing-return-type,
            -readability-magic-numbers,
            -readability-identifier-length,
            -bugprone-reserved-identifier, 
            '
CheckOptions:
  - { key: readability-identifier-naming.ClassCase,           value: CamelCase  }
  - { key: readability-identifier-naming.EnumCase,            value: CamelCase  }
  - { key: readability-identifier-naming.FunctionCase,        value: CamelCase  }
  - { key: readability-identifier-naming.GlobalConstantCase,  value: UPPER_CASE }
  - { key: readability-identifier-naming.MemberCase,          value: lower_case }
  - { key: readability-identifier-naming.MemberSuffix,        value: _          }
  - { key: readability-identifier-naming.NamespaceCase,       value: lower_case }
  - { key: readability-identifier-naming.StructCase,          value: CamelCase  }
  - { key: readability-identifier-naming.UnionCase,           value: CamelCase  }
  - { key: readability-identifier-naming.VariableCase,        value: lower_case }
WarningsAsErrors: '*'
HeaderFilterRegex: '/(src|test)/include'
AnalyzeTemporaryDtors: true

#### Disabled checks and why: #####
#
# -readability-convert-member-functions-to-static,
#     This check started going off in the upgrade from clang-tidy-8 to clang-tidy-12.  It is not always correct because 
#     we hide the reference implementation in another repository.
# -clang-analyzer-security.insecureAPI.rand, -clang-analyzer-security.insecureAPI.rand, -bugprone-unhandled-self-assignment, 
# -bugprone-implicit-widening-of-multiplication-result
#     These have not been investigated yet.
# -bugprone-reserved-identifier, 
#     Fails due to use of some __SHORT_FILE__ symbol, originating from very old code.
# -bugprone-suspicious-include, 
#     False positive due to GTest code.
# -bugprone-too-small-loop-variable,
#     Complains about uint8_t or uint16_t when the limit on the loop is a container's .size() (size_t).
#     We usually do this when we know the maximum size of the container though, so propose leaving disabled.
# -clang-analyzer-cplusplus.NewDelete,
#     Seems to generate false positives. Suggest relying on ASAN and valgrind for memory stuff.
# -clang-analyzer-cplusplus.NewDeleteLeaks,
#     Seems to generate false positives. Suggest relying on ASAN and valgrind for memory stuff.
# -modernize-use-nodiscard,
#     New C++17 feature, slightly polarizing. Would clutter codebase.
# -modernize-avoid-c-arrays,
#     We use C-style arrays in page.h, type.h and logger.h. They're a little more ergonomic than std::array. Thoughts?
# -readability-magic-numbers,
#     Let's not deal with people doing ridiculous things to hack around this. If it bites them, it bites them.
# -bugprone-signed-char-misuse, -clang-diagnostic-implicit-int-float-conversion, -readability-make-member-function-const, 
# -readability-qualified-auto, -readability-redundant-access-specifiers
#     These were previously disabled for not being available in clang-tidy-8. They are now available on our clang-tidy-12, 
#     and potentially worth investigating/fixing.
# -bugprone-exception-escape
#     Weird. No idea how to resolve.odernize-use-trailing-return-type
